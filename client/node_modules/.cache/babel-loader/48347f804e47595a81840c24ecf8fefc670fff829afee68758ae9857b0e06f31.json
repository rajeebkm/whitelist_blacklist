{"ast":null,"code":"var _jsxFileName = \"/Users/h-02/Desktop/app/whitelistDapp/client/src/components/connectWallet.js\",\n  _s = $RefreshSig$();\n// import { Button, Paper, Stack, Typography } from \"@mui/material\";\nimport { ethers } from \"ethers\";\nimport { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst connectWallet = () => {\n  _s();\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [balance, setBalance] = useState(null);\n  useEffect(() => {\n    if (window.ethereum) {\n      window.ethereum.on(\"accountChanged\", accountChanged);\n      window.ethereum.on(\"chainChanged\", chainChanged);\n    }\n  }, []);\n  const connectHandler = async () => {\n    if (window.ethereum) {\n      try {\n        const res = await window.ethereum.request({\n          method: \"eth_requestAccounts\"\n        });\n        await accountChanged(res[0]);\n      } catch (err) {\n        console.error(err);\n        setErrorMessage(\"There was a problem connecting to MetaMask\");\n      }\n    } else {\n      setErrorMessage(\"Install MetaMask\");\n    }\n  };\n  const accountChanged = async newAccount => {\n    setAccount(newAccount);\n    try {\n      const balance = await window.ethereum.request({\n        method: \"eth_getBalance\",\n        params: [newAccount.toString(), \"latest\"]\n      });\n      setBalance(ethers.utils.formatEther(balance));\n    } catch (err) {\n      console.error(err);\n      setErrorMessage(\"There was a problem connecting to MetaMask\");\n    }\n  };\n  const chainChanged = () => {\n    setErrorMessage(null);\n    setAccount(null);\n    setBalance(null);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Wallet Connection\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: connectHandler,\n      children: \"Connect Wallet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this)\n  // <Paper elevation={3} sx={{ p: 3 }}>\n  //   <Stack spacing={2}>\n  //     <Typography variant=\"h6\"> Account: {account} </Typography>\n  //     <Typography variant=\"h6\">\n  //       Balance: {balance} {balance ? \"ETH\" : null}\n  //     </Typography>\n  //     <Button onClick={connectHandler}>Connect Account</Button>\n  //     {errorMessage ? (\n  //       <Typography variant=\"body1\" color=\"red\">\n  //         Error: {errorMessage}\n  //       </Typography>\n  //     ) : null}\n  //   </Stack>\n  // </Paper>\n  ;\n};\n_s(connectWallet, \"mdDOIZQG7y5xfFvyzD60oHnbYrA=\");\nexport default connectWallet;","map":{"version":3,"names":["ethers","useEffect","useState","connectWallet","errorMessage","setErrorMessage","account","setAccount","balance","setBalance","window","ethereum","on","accountChanged","chainChanged","connectHandler","res","request","method","err","console","error","newAccount","params","toString","utils","formatEther"],"sources":["/Users/h-02/Desktop/app/whitelistDapp/client/src/components/connectWallet.js"],"sourcesContent":["// import { Button, Paper, Stack, Typography } from \"@mui/material\";\nimport { ethers } from \"ethers\";\nimport { useEffect, useState } from \"react\";\n\nconst connectWallet = () => {\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [balance, setBalance] = useState(null);\n\n  useEffect(() => {\n    if (window.ethereum) {\n      window.ethereum.on(\"accountChanged\", accountChanged);\n      window.ethereum.on(\"chainChanged\", chainChanged);\n    }\n  }, []);\n\n  const connectHandler = async () => {\n    if (window.ethereum) {\n      try {\n        const res = await window.ethereum.request({\n          method: \"eth_requestAccounts\",\n        });\n        await accountChanged(res[0]);\n      } catch (err) {\n        console.error(err);\n        setErrorMessage(\"There was a problem connecting to MetaMask\");\n      }\n    } else {\n      setErrorMessage(\"Install MetaMask\");\n    }\n  };\n\n  const accountChanged = async (newAccount) => {\n    setAccount(newAccount);\n    try {\n      const balance = await window.ethereum.request({\n        method: \"eth_getBalance\",\n        params: [newAccount.toString(), \"latest\"],\n      });\n      setBalance(ethers.utils.formatEther(balance));\n    } catch (err) {\n      console.error(err);\n      setErrorMessage(\"There was a problem connecting to MetaMask\");\n    }\n  };\n\n  const chainChanged = () => {\n    setErrorMessage(null);\n    setAccount(null);\n    setBalance(null);\n  };\n\n  return (\n    <div>\n      <h1>Wallet Connection</h1>\n\n      <button onClick={connectHandler}>Connect Wallet</button>\n      <h3></h3>\n\n    </div>\n    // <Paper elevation={3} sx={{ p: 3 }}>\n    //   <Stack spacing={2}>\n    //     <Typography variant=\"h6\"> Account: {account} </Typography>\n    //     <Typography variant=\"h6\">\n    //       Balance: {balance} {balance ? \"ETH\" : null}\n    //     </Typography>\n    //     <Button onClick={connectHandler}>Connect Account</Button>\n    //     {errorMessage ? (\n    //       <Typography variant=\"body1\" color=\"red\">\n    //         Error: {errorMessage}\n    //       </Typography>\n    //     ) : null}\n    //   </Stack>\n    // </Paper>\n  );\n};\n\nexport default connectWallet;"],"mappings":";;AAAA;AACA,SAASA,MAAM,QAAQ,QAAQ;AAC/B,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC;AAE5C,MAAMC,aAAa,GAAG,MAAM;EAAA;EAC1B,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGH,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACI,OAAO,EAAEC,UAAU,CAAC,GAAGL,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACM,OAAO,EAAEC,UAAU,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAE5CD,SAAS,CAAC,MAAM;IACd,IAAIS,MAAM,CAACC,QAAQ,EAAE;MACnBD,MAAM,CAACC,QAAQ,CAACC,EAAE,CAAC,gBAAgB,EAAEC,cAAc,CAAC;MACpDH,MAAM,CAACC,QAAQ,CAACC,EAAE,CAAC,cAAc,EAAEE,YAAY,CAAC;IAClD;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,cAAc,GAAG,YAAY;IACjC,IAAIL,MAAM,CAACC,QAAQ,EAAE;MACnB,IAAI;QACF,MAAMK,GAAG,GAAG,MAAMN,MAAM,CAACC,QAAQ,CAACM,OAAO,CAAC;UACxCC,MAAM,EAAE;QACV,CAAC,CAAC;QACF,MAAML,cAAc,CAACG,GAAG,CAAC,CAAC,CAAC,CAAC;MAC9B,CAAC,CAAC,OAAOG,GAAG,EAAE;QACZC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;QAClBd,eAAe,CAAC,4CAA4C,CAAC;MAC/D;IACF,CAAC,MAAM;MACLA,eAAe,CAAC,kBAAkB,CAAC;IACrC;EACF,CAAC;EAED,MAAMQ,cAAc,GAAG,MAAOS,UAAU,IAAK;IAC3Cf,UAAU,CAACe,UAAU,CAAC;IACtB,IAAI;MACF,MAAMd,OAAO,GAAG,MAAME,MAAM,CAACC,QAAQ,CAACM,OAAO,CAAC;QAC5CC,MAAM,EAAE,gBAAgB;QACxBK,MAAM,EAAE,CAACD,UAAU,CAACE,QAAQ,EAAE,EAAE,QAAQ;MAC1C,CAAC,CAAC;MACFf,UAAU,CAACT,MAAM,CAACyB,KAAK,CAACC,WAAW,CAAClB,OAAO,CAAC,CAAC;IAC/C,CAAC,CAAC,OAAOW,GAAG,EAAE;MACZC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;MAClBd,eAAe,CAAC,4CAA4C,CAAC;IAC/D;EACF,CAAC;EAED,MAAMS,YAAY,GAAG,MAAM;IACzBT,eAAe,CAAC,IAAI,CAAC;IACrBE,UAAU,CAAC,IAAI,CAAC;IAChBE,UAAU,CAAC,IAAI,CAAC;EAClB,CAAC;EAED,oBACE;IAAA,wBACE;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAA0B,eAE1B;MAAQ,OAAO,EAAEM,cAAe;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAwB,eACxD;MAAA;MAAA;MAAA;IAAA,QAAS;EAAA;IAAA;IAAA;IAAA;EAAA;EAGX;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAAA;AAEJ,CAAC;AAAC,GAvEIZ,aAAa;AAyEnB,eAAeA,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}