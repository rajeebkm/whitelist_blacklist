{"ast":null,"code":"var _jsxFileName = \"/Users/h-02/Desktop/app/whitelistDapp/client/src/components/connectWallet.js\",\n  _s = $RefreshSig$();\nimport { Button, Paper, Stack, Typography } from \"@mui/material\";\nimport { ethers } from \"ethers\";\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MetaConnect = () => {\n  _s();\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [balance, setBalance] = useState(null);\n  useEffect(() => {\n    if (window.ethereum) {\n      window.ethereum.on(\"accountsChanged\", accountsChanged);\n      window.ethereum.on(\"chainChanged\", chainChanged);\n    }\n  }, []);\n  const connectHandler = async () => {\n    if (window.ethereum) {\n      try {\n        const res = await window.ethereum.request({\n          method: \"eth_requestAccounts\"\n        });\n        await accountsChanged(res[0]);\n      } catch (err) {\n        console.error(err);\n        setErrorMessage(\"There was a problem connecting to MetaMask\");\n      }\n    } else {\n      setErrorMessage(\"Install MetaMask\");\n    }\n  };\n  const accountsChanged = async newAccount => {\n    setAccount(newAccount);\n    try {\n      const balance = await window.ethereum.request({\n        method: \"eth_getBalance\",\n        params: [newAccount.toString(), \"latest\"]\n      });\n      setBalance(ethers.utils.formatEther(balance));\n    } catch (err) {\n      console.error(err);\n      setErrorMessage(\"There was a problem connecting to MetaMask\");\n    }\n  };\n  const chainChanged = () => {\n    setErrorMessage(null);\n    setAccount(null);\n    setBalance(null);\n  };\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    elevation: 3,\n    sx: {\n      p: 3\n    },\n    children: /*#__PURE__*/_jsxDEV(Stack, {\n      spacing: 2,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        children: [\" Account: \", account, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        children: [\"Balance: \", balance, \" \", balance ? \"ETH\" : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: connectHandler,\n        children: \"Connect Account\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), errorMessage ? /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body1\",\n        color: \"red\",\n        children: [\"Error: \", errorMessage]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_s(MetaConnect, \"mdDOIZQG7y5xfFvyzD60oHnbYrA=\");\n_c = MetaConnect;\nexport default WalletCard;\nvar _c;\n$RefreshReg$(_c, \"MetaConnect\");","map":{"version":3,"names":["Button","Paper","Stack","Typography","ethers","React","useEffect","useState","MetaConnect","errorMessage","setErrorMessage","account","setAccount","balance","setBalance","window","ethereum","on","accountsChanged","chainChanged","connectHandler","res","request","method","err","console","error","newAccount","params","toString","utils","formatEther","p","WalletCard"],"sources":["/Users/h-02/Desktop/app/whitelistDapp/client/src/components/connectWallet.js"],"sourcesContent":["import { Button, Paper, Stack, Typography } from \"@mui/material\";\nimport { ethers } from \"ethers\";\nimport React, { useEffect, useState } from \"react\";\n\nconst MetaConnect = () => {\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [balance, setBalance] = useState(null);\n\n  useEffect(() => {\n    if (window.ethereum) {\n      window.ethereum.on(\"accountsChanged\", accountsChanged);\n      window.ethereum.on(\"chainChanged\", chainChanged);\n    }\n  }, []);\n\n  const connectHandler = async () => {\n    if (window.ethereum) {\n      try {\n        const res = await window.ethereum.request({\n          method: \"eth_requestAccounts\",\n        });\n        await accountsChanged(res[0]);\n      } catch (err) {\n        console.error(err);\n        setErrorMessage(\"There was a problem connecting to MetaMask\");\n      }\n    } else {\n      setErrorMessage(\"Install MetaMask\");\n    }\n  };\n\n  const accountsChanged = async (newAccount) => {\n    setAccount(newAccount);\n    try {\n      const balance = await window.ethereum.request({\n        method: \"eth_getBalance\",\n        params: [newAccount.toString(), \"latest\"],\n      });\n      setBalance(ethers.utils.formatEther(balance));\n    } catch (err) {\n      console.error(err);\n      setErrorMessage(\"There was a problem connecting to MetaMask\");\n    }\n  };\n\n  const chainChanged = () => {\n    setErrorMessage(null);\n    setAccount(null);\n    setBalance(null);\n  };\n\n  return (\n    <Paper elevation={3} sx={{ p: 3 }}>\n      <Stack spacing={2}>\n        <Typography variant=\"h6\"> Account: {account} </Typography>\n        <Typography variant=\"h6\">\n          Balance: {balance} {balance ? \"ETH\" : null}\n        </Typography>\n        <Button onClick={connectHandler}>Connect Account</Button>\n        {errorMessage ? (\n          <Typography variant=\"body1\" color=\"red\">\n            Error: {errorMessage}\n          </Typography>\n        ) : null}\n      </Stack>\n    </Paper>\n  );\n};\n\nexport default WalletCard;"],"mappings":";;AAAA,SAASA,MAAM,EAAEC,KAAK,EAAEC,KAAK,EAAEC,UAAU,QAAQ,eAAe;AAChE,SAASC,MAAM,QAAQ,QAAQ;AAC/B,OAAOC,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC;AAEnD,MAAMC,WAAW,GAAG,MAAM;EAAA;EACxB,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGH,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACI,OAAO,EAAEC,UAAU,CAAC,GAAGL,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACM,OAAO,EAAEC,UAAU,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAE5CD,SAAS,CAAC,MAAM;IACd,IAAIS,MAAM,CAACC,QAAQ,EAAE;MACnBD,MAAM,CAACC,QAAQ,CAACC,EAAE,CAAC,iBAAiB,EAAEC,eAAe,CAAC;MACtDH,MAAM,CAACC,QAAQ,CAACC,EAAE,CAAC,cAAc,EAAEE,YAAY,CAAC;IAClD;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,cAAc,GAAG,YAAY;IACjC,IAAIL,MAAM,CAACC,QAAQ,EAAE;MACnB,IAAI;QACF,MAAMK,GAAG,GAAG,MAAMN,MAAM,CAACC,QAAQ,CAACM,OAAO,CAAC;UACxCC,MAAM,EAAE;QACV,CAAC,CAAC;QACF,MAAML,eAAe,CAACG,GAAG,CAAC,CAAC,CAAC,CAAC;MAC/B,CAAC,CAAC,OAAOG,GAAG,EAAE;QACZC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;QAClBd,eAAe,CAAC,4CAA4C,CAAC;MAC/D;IACF,CAAC,MAAM;MACLA,eAAe,CAAC,kBAAkB,CAAC;IACrC;EACF,CAAC;EAED,MAAMQ,eAAe,GAAG,MAAOS,UAAU,IAAK;IAC5Cf,UAAU,CAACe,UAAU,CAAC;IACtB,IAAI;MACF,MAAMd,OAAO,GAAG,MAAME,MAAM,CAACC,QAAQ,CAACM,OAAO,CAAC;QAC5CC,MAAM,EAAE,gBAAgB;QACxBK,MAAM,EAAE,CAACD,UAAU,CAACE,QAAQ,EAAE,EAAE,QAAQ;MAC1C,CAAC,CAAC;MACFf,UAAU,CAACV,MAAM,CAAC0B,KAAK,CAACC,WAAW,CAAClB,OAAO,CAAC,CAAC;IAC/C,CAAC,CAAC,OAAOW,GAAG,EAAE;MACZC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;MAClBd,eAAe,CAAC,4CAA4C,CAAC;IAC/D;EACF,CAAC;EAED,MAAMS,YAAY,GAAG,MAAM;IACzBT,eAAe,CAAC,IAAI,CAAC;IACrBE,UAAU,CAAC,IAAI,CAAC;IAChBE,UAAU,CAAC,IAAI,CAAC;EAClB,CAAC;EAED,oBACE,QAAC,KAAK;IAAC,SAAS,EAAE,CAAE;IAAC,EAAE,EAAE;MAAEkB,CAAC,EAAE;IAAE,CAAE;IAAA,uBAChC,QAAC,KAAK;MAAC,OAAO,EAAE,CAAE;MAAA,wBAChB,QAAC,UAAU;QAAC,OAAO,EAAC,IAAI;QAAA,yBAAYrB,OAAO;MAAA;QAAA;QAAA;QAAA;MAAA,QAAe,eAC1D,QAAC,UAAU;QAAC,OAAO,EAAC,IAAI;QAAA,wBACZE,OAAO,OAAGA,OAAO,GAAG,KAAK,GAAG,IAAI;MAAA;QAAA;QAAA;QAAA;MAAA,QAC/B,eACb,QAAC,MAAM;QAAC,OAAO,EAAEO,cAAe;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAyB,EACxDX,YAAY,gBACX,QAAC,UAAU;QAAC,OAAO,EAAC,OAAO;QAAC,KAAK,EAAC,KAAK;QAAA,sBAC7BA,YAAY;MAAA;QAAA;QAAA;QAAA;MAAA,QACT,GACX,IAAI;IAAA;MAAA;MAAA;MAAA;IAAA;EACF;IAAA;IAAA;IAAA;EAAA,QACF;AAEZ,CAAC;AAAC,GAhEID,WAAW;AAAA,KAAXA,WAAW;AAkEjB,eAAeyB,UAAU;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}